print.Date()
getwd()
ls()
getwd()
ls
ls90
ls()
dir()
getwd()
setwd("C:/Users/sukdevkoner/datasciencecoursera/ProgrammingAssignment2")
dir()
source("cachematrix.R")
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invm <- x$getinverse()
if(!is.null(invm)) {
message("getting cached data")
return(invm)
}
data <- x$get()
invm <- solve(data, ...)
x$setinverse(invm)
invm
}
source("cachematrix.R")
## Put comments here that give an overall description of what your
## Put comments here that give an overall description of what your
## functions do
## These functions written in for Coursera Data Science: R Programming
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
> my_matrix$get()
[,1] [,2]
[1,]    1    3
[2,]    2    4
> my_matrix$getInverse()
NULL
> cacheSolve(my_matrix)
[,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> cacheSolve(my_matrix)
getting cached data
[,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> my_matrix$getInverse()
[,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5
> my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
> my_matrix$get()
[,1] [,2]
[1,]    2    1
[2,]    2    4
> my_matrix$getInverse()
NULL
> cacheSolve(my_matrix)
[,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> cacheSolve(my_matrix)
getting cached data
[,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
> my_matrix$getInverse()
[,1]       [,2]
[1,]  0.6666667 -0.1666667
[2,] -0.3333333  0.3333333
source("cachematrix.R")
source("cachematrix.R",local = 'FALSE')
getwd()
ls()
dir()
source("ProgrammingAssignment2/cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
dir()
source("cachematrix.R", local = TRUE)
dir()
source("cachematrix.R", local = TRUE)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
View(my_matrix)
View(my_matrix)
View(cacheSolve)
my_matrix()
my_matrix
View(makeCacheMatrix)
View(my_matrix)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix
source("cachematrix.R", local = TRUE)
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
> my_matrix$getInverse()
my_matrix$getInverse()
my_matrix$getinverse()
cachesolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
source("cachematrix.R")
getwd()
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(6:11, 3, 3))
my_matrix$get()
> my_matrix$getinverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
rm(my_matrix)
my_matrix
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
cacheSolve(my_matrix)
cacheSolve(my_matrix)
